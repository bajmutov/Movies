{"version":3,"file":"static/js/503.61afa869.chunk.js","mappings":"+SAEMA,EAAW,+BACXC,EAAU,mCAEHC,EAAkB,mCAAG,oGACTC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFZ,cAC1BG,EAD0B,yBAIzBA,EAASC,KAAKC,SAJW,2CAAH,qDAOlBC,EAAkB,mCAAG,WAAMC,GAAN,uFACTL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAQ,EADA,oBACoBP,IAFX,cAC1BG,EAD0B,yBAIzBA,EAASC,MAJgB,2CAAH,sDAOlBI,EAAiB,mCAAG,WAAMD,GAAN,uFACRL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAQ,EADA,4BAC4BP,IAFpB,cACzBG,EADyB,yBAIxBA,EAASC,KAAKC,SAJU,2CAAH,sDAOjBI,EAAgB,mCAAG,WAAMF,GAAN,uFACPL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAQ,EADA,4BAC4BP,IAFrB,cACxBG,EADwB,yBAIvBA,EAASC,KAAKM,MAJS,2CAAH,sDAOhBC,EAAgB,mCAAG,WAAMC,GAAN,uFACPV,EAAAA,EAAAA,IAAA,UAClBH,EADkB,+BACaa,EADb,oBACmCZ,IAF5B,cACxBG,EADwB,yBAIvBA,EAASC,KAAKC,SAJS,2CAAH,qD,6HCxB7B,EATkB,SAAC,GAAkB,IAAhBQ,EAAe,EAAfA,SACnB,OACE,kBAAMA,SAAUA,EAAhB,WACE,kBAAOC,KAAK,OAAOC,KAAK,eACxB,mBAAQD,KAAK,SAAb,sBAGL,E,mCCoDD,EArDe,WAAO,IAAD,EACnB,GAAwCE,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAS,UAAGF,EAAaG,IAAI,oBAApB,QAAoC,GACnD,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAoCA,OArBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,8GAEKd,EAAAA,EAAAA,IAAiBQ,GAFtB,OAEVG,EAFU,OAGhBI,QAAQC,IAAI,SAAUL,GACtBC,EAAUD,GAJM,gDAMhBM,IAAAA,OAAAA,QAAwB,KAAMC,SANd,yDAAH,qDASjBJ,GACD,GAAE,CAACN,KAWF,iCACE,SAAC,EAAD,CAAWN,SApCM,SAAAiB,GACnBA,EAAEC,iBACF,IAAQC,EAAUF,EAAEG,OAAOC,SAASf,UAA5Ba,MAIR,GAHKA,EAAMG,QACTC,MAAM,oBAEM,KAAVJ,EACF,OAAOd,EAAgB,CAAC,GAE1BA,EAAgB,CAAEC,UAAWa,IAC7BF,EAAEG,OAAOI,OACV,KA0BG,wBACGf,EAAOgB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAArB,SAA4BC,KADrBD,EADC,QAQnB,C","sources":["Api/getApi.js","components/SearchBox/SearchBox.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'fbcd27110e3ea351d2ea352461b15e7c';\n\nexport const fetchPopularMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchFullInfoMovie = async searchId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${searchId}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchReviewsMovie = async searchId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${searchId}/reviews?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchActorsMovie = async searchId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${searchId}/credits?api_key=${API_KEY}`\n  );\n  return response.data.cast;\n};\n\nexport const fetchMovieByName = async searchName => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?query=${searchName}&api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n","const SearchBox = ({ onSubmit }) => {\n  return (\n    <form onSubmit={onSubmit}>\n      <input type=\"text\" name=\"movieName\" />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nexport default SearchBox;\n","import { fetchMovieByName } from 'Api/getApi';\nimport SearchBox from 'components/SearchBox/SearchBox';\nimport Notiflix from 'notiflix';\nimport { useEffect, useState } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('movieName') ?? '';\n  const [movies, setMovies] = useState([]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const { value } = e.target.elements.movieName;\n    if (!value.trim()) {\n      alert('Input movie name');\n    }\n    if (value === '') {\n      return setSearchParams({});\n    }\n    setSearchParams({ movieName: value });\n    e.target.reset();\n  };\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        const movies = await fetchMovieByName(movieName);\n        console.log('movies', movies);\n        setMovies(movies);\n      } catch (error) {\n        Notiflix.Notify.failure(error.message);\n      }\n    };\n    fetchMovies();\n  }, [movieName]);\n\n  // const updateQueryString = evt => {\n  //   const movieIdValue = evt.target.value;\n  //   if (movieIdValue === '') {\n  //     return setSearchParams({});\n  //   }\n  //   setSearchParams({ movieId: movieIdValue });\n  // };\n\n  return (\n    <>\n      <SearchBox onSubmit={handleSubmit} />\n      <ul>\n        {movies.map(({ id, title }) => (\n          <li key={id}>\n            <Link to={`/movies/${id}`}>{title}</Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["BASE_URL","API_KEY","fetchPopularMovies","axios","response","data","results","fetchFullInfoMovie","searchId","fetchReviewsMovie","fetchActorsMovie","cast","fetchMovieByName","searchName","onSubmit","type","name","useSearchParams","searchParams","setSearchParams","movieName","get","useState","movies","setMovies","useEffect","fetchMovies","console","log","Notiflix","message","e","preventDefault","value","target","elements","trim","alert","reset","map","id","title","to"],"sourceRoot":""}