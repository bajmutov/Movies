{"version":3,"file":"static/js/146.7e43c600.chunk.js","mappings":"+SAEMA,EAAW,+BACXC,EAAU,mCAEHC,EAAkB,mCAAG,oGACTC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFZ,cAC1BG,EAD0B,yBAIzBA,EAASC,KAAKC,SAJW,2CAAH,qDAOlBC,EAAkB,mCAAG,WAAMC,GAAN,uFACTL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAQ,EADA,oBACoBP,IAFX,cAC1BG,EAD0B,yBAIzBA,EAASC,MAJgB,2CAAH,sDAOlBI,EAAiB,mCAAG,WAAMD,GAAN,uFACRL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAQ,EADA,4BAC4BP,IAFpB,cACzBG,EADyB,yBAIxBA,EAASC,KAAKC,SAJU,2CAAH,sDAOjBI,EAAgB,mCAAG,WAAMF,GAAN,uFACPL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAQ,EADA,4BAC4BP,IAFrB,cACxBG,EADwB,yBAIvBA,EAASC,KAAKM,MAJS,2CAAH,sDAOhBC,EAAgB,mCAAG,WAAMC,GAAN,uFACPV,EAAAA,EAAAA,IAAA,UAClBH,EADkB,+BACaa,EADb,oBACmCZ,IAF5B,cACxBG,EADwB,yBAIvBA,EAASC,KAAKC,SAJS,2CAAH,qD,sIC/BhBQ,EAAS,WACpB,OACE,SAAC,KAAD,CACEC,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,iBACVC,aAAc,CAAC,EACfC,aAAa,kBAGlB,ECJD,EATkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,OACE,kBAAMA,SAAUA,EAAhB,WACE,kBAAOC,KAAK,OAAOC,KAAK,eACxB,mBAAQD,KAAK,SAAb,SAAsB,aAG3B,E,4CC4DD,EA5De,WAAO,IAAD,EACnB,GAAkCE,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAS,UAAGF,EAAaG,IAAI,oBAApB,QAAoC,GACnD,GAA4BP,EAAAA,EAAAA,UAAS,IAArC,eAAOQ,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MAsCjB,OAvBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,oGAEhBX,GAAa,GAFG,UAGKd,EAAAA,EAAAA,IAAiBkB,GAHtB,OAGVE,EAHU,OAIhBC,EAAUD,GAJM,gDAMhBM,IAAAA,OAAAA,QAAwB,KAAMC,SANd,yBAQhBb,GAAa,GARG,4EAAH,qDAWjBW,GACD,GAAE,CAACP,KAWF,iCACE,SAAC,EAAD,CAAWT,SAtCM,SAAAmB,GACnBA,EAAEC,iBACF,IAAQC,EAAUF,EAAEG,OAAOC,SAASd,UAA5BY,MAIR,GAHKA,EAAMG,QACTC,MAAM,oBAEM,KAAVJ,EACF,OAAOb,EAAgB,CAAC,GAE1BA,EAAgB,CAAEC,UAAWY,IAC7BF,EAAEG,OAAOI,OACV,IA4BItB,IAAa,SAACX,EAAD,KACd,wBACGkB,EAAOgB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMnB,GAA1C,SACGgB,KAFID,EADC,QAUnB,C","sources":["Api/getApi.js","components/Loader/Loader.jsx","components/SearchBox/SearchBox.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'fbcd27110e3ea351d2ea352461b15e7c';\n\nexport const fetchPopularMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchFullInfoMovie = async searchId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${searchId}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchReviewsMovie = async searchId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${searchId}/reviews?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchActorsMovie = async searchId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${searchId}/credits?api_key=${API_KEY}`\n  );\n  return response.data.cast;\n};\n\nexport const fetchMovieByName = async searchName => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?query=${searchName}&api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n","import { Blocks } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <Blocks\n      visible={true}\n      height=\"80\"\n      width=\"80\"\n      ariaLabel=\"blocks-loading\"\n      wrapperStyle={{}}\n      wrapperClass=\"blocks-wrapper\"\n    />\n  );\n};\n","const SearchBox = ({ onSubmit }) => {\n  return (\n    <form onSubmit={onSubmit}>\n      <input type=\"text\" name=\"movieName\" />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nexport default SearchBox;\n","import { fetchMovieByName } from 'Api/getApi';\nimport { Loader } from 'components/Loader/Loader';\nimport SearchBox from 'components/SearchBox/SearchBox';\nimport Notiflix from 'notiflix';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\n\nconst Movies = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('movieName') ?? '';\n  const [movies, setMovies] = useState([]);\n  const location = useLocation();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const { value } = e.target.elements.movieName;\n    if (!value.trim()) {\n      alert('Input movie name');\n    }\n    if (value === '') {\n      return setSearchParams({});\n    }\n    setSearchParams({ movieName: value });\n    e.target.reset();\n  };\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        setIsLoading(true);\n        const movies = await fetchMovieByName(movieName);\n        setMovies(movies);\n      } catch (error) {\n        Notiflix.Notify.failure(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovies();\n  }, [movieName]);\n\n  // const updateQueryString = evt => {\n  //   const movieIdValue = evt.target.value;\n  //   if (movieIdValue === '') {\n  //     return setSearchParams({});\n  //   }\n  //   setSearchParams({ movieId: movieIdValue });\n  // };\n\n  return (\n    <>\n      <SearchBox onSubmit={handleSubmit} />\n      {isLoading && <Loader />}\n      <ul>\n        {movies.map(({ id, title }) => (\n          <li key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              {title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["BASE_URL","API_KEY","fetchPopularMovies","axios","response","data","results","fetchFullInfoMovie","searchId","fetchReviewsMovie","fetchActorsMovie","cast","fetchMovieByName","searchName","Loader","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","onSubmit","type","name","useState","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","movieName","get","movies","setMovies","location","useLocation","useEffect","fetchMovies","Notiflix","message","e","preventDefault","value","target","elements","trim","alert","reset","map","id","title","to","state","from"],"sourceRoot":""}