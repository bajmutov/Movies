{"version":3,"file":"static/js/808.7007d131.chunk.js","mappings":"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","sources":["Api/getApi.js","components/AdditionalInfo/AdditionalInfo.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'fbcd27110e3ea351d2ea352461b15e7c';\n\nexport const fetchPopularMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchFullInfoMovie = async searchId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${searchId}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchReviewsMovie = async searchId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${searchId}/reviews?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchActorsMovie = async searchId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${searchId}/credits?api_key=${API_KEY}`\n  );\n  return response.data.cast;\n};\n\nexport const fetchMovieByName = async searchName => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?query=${searchName}&api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n","import { Link } from 'react-router-dom';\n\nconst AdditionalInfo = () => {\n  return (\n    <div>\n      <h2>Additional information</h2>\n      <ul>\n        <li>\n          <Link to={`cast`}>Cast</Link>\n        </li>\n        <li>\n          <Link to={`reviews`}>Reviews</Link>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default AdditionalInfo;\n","import { fetchFullInfoMovie } from 'Api/getApi';\nimport AdditionalInfo from 'components/AdditionalInfo/AdditionalInfo';\nimport Notiflix from 'notiflix';\nimport { Suspense, useEffect, useRef, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\n\nconst MovieDetails = () => {\n  const [film, setFilm] = useState({});\n  const [isVisible, setIsVisible] = useState(false);\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/movies');\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchFilmsAndUpdateState = async () => {\n      try {\n        setIsVisible(false);\n        const results = await fetchFullInfoMovie(movieId);\n        console.log('first', results.homepage);\n        if (!results.homepage) {\n          setIsVisible(true);\n        }\n        setFilm(results);\n      } catch (error) {\n        Notiflix.Notify.failure(error.message);\n      }\n    };\n    fetchFilmsAndUpdateState();\n  }, [movieId]);\n\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    film;\n\n  const shouldShowInfo =\n    poster_path &&\n    title &&\n    release_date &&\n    vote_average &&\n    overview &&\n    genres?.length > 0;\n\n  return (\n    <>\n      {shouldShowInfo ? (\n        <>\n          <Link to={backLinkLocationRef}>Go Back</Link>\n          <div>\n            <img\n              src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n              alt=\"Movie poster\"\n              width={300}\n              height={400}\n            />\n            <div>\n              <h2>\n                {title} ({release_date?.split('-')[0]})\n              </h2>\n              <p>User Score: {Number(vote_average).toFixed(2)}</p>\n              <h3>Overview</h3>\n              <p>{overview}</p>\n              <h3>Genres</h3>\n              <div>\n                {genres?.map(({ id, name }) => (\n                  <p key={id}>{name}</p>\n                ))}\n              </div>\n            </div>\n          </div>\n          <div>\n            <AdditionalInfo id={movieId} location={location} />\n          </div>\n          <Suspense fallback={<div>Loading info...</div>}>\n            <Outlet />\n          </Suspense>\n        </>\n      ) : (\n        isVisible && <h2>Sorry ... No information</h2>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["BASE_URL","API_KEY","fetchPopularMovies","axios","response","data","results","fetchFullInfoMovie","searchId","fetchReviewsMovie","fetchActorsMovie","cast","fetchMovieByName","searchName","to","useState","film","setFilm","isVisible","setIsVisible","location","useLocation","backLinkLocationRef","useRef","state","from","movieId","useParams","useEffect","fetchFilmsAndUpdateState","console","log","homepage","Notiflix","message","poster_path","title","release_date","vote_average","overview","genres","shouldShowInfo","length","src","alt","width","height","split","Number","toFixed","map","id","name","Suspense","fallback"],"sourceRoot":""}