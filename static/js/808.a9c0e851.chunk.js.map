{"version":3,"file":"static/js/808.a9c0e851.chunk.js","mappings":"uRAEMA,EAAW,+BACXC,EAAU,mCAEHC,EAAkB,mCAAG,oGACTC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFZ,cAC1BG,EAD0B,yBAIzBA,EAASC,KAAKC,SAJW,2CAAH,qDAOlBC,EAAkB,mCAAG,WAAMC,GAAN,uFACTL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAQ,EADA,oBACoBP,IAFX,cAC1BG,EAD0B,yBAIzBA,EAASC,MAJgB,2CAAH,sDAOlBI,EAAiB,mCAAG,WAAMD,GAAN,uFACRL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAQ,EADA,4BAC4BP,IAFpB,cACzBG,EADyB,yBAIxBA,EAASC,KAAKC,SAJU,2CAAH,sDAOjBI,EAAgB,mCAAG,WAAMF,GAAN,uFACPL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAQ,EADA,4BAC4BP,IAFrB,cACxBG,EADwB,yBAIvBA,EAASC,KAAKM,MAJS,2CAAH,qD,qICJ7B,EApBuB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACxB,OACE,4BACE,oDACA,2BACE,yBACE,SAAC,KAAD,CAAMC,GAAE,OAAUC,MAAO,CAAEC,KAAMH,GAAjC,qBAIF,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAaC,MAAO,CAAEC,KAAMH,GAApC,4BAOT,E,oCC2DD,EAzEqB,WAAO,IAAD,IACzB,GAAwBI,EAAAA,EAAAA,UAAS,CAAC,GAAlC,eAAOC,EAAP,KAAaC,EAAb,KACMN,GAAWO,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACT,EAASE,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WACnDO,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAwB,mCAAG,8GAEPlB,EAAAA,EAAAA,IAAmBe,GAFZ,UAEvBhB,EAFuB,6BAIrB,IAAIoB,MAAM,0BAJW,OAM7BR,EAAQZ,GANqB,gDAQ7BqB,IAAAA,OAAAA,QAAwB,KAAMC,SARD,yDAAH,qDAW9BH,GACD,GAAE,CAACH,IAEJ,IAAQO,EACNZ,EADMY,YAAaC,EACnBb,EADmBa,MAAOC,EAC1Bd,EAD0Bc,aAAcC,EACxCf,EADwCe,aAAcC,EACtDhB,EADsDgB,SAAUC,EAChEjB,EADgEiB,OAG5DC,EACJN,GACAC,GACAC,GACAC,GACAC,IACM,OAANC,QAAM,IAANA,OAAA,EAAAA,EAAQE,QAAS,EAEnB,OACE,8BACGD,IACC,iCACE,SAAC,KAAD,CAAMtB,GAAIO,EAAV,sBACA,4BACE,gBACEiB,IAAG,yCAAoCR,GACvCS,IAAI,eACJC,MAAO,IACPC,OAAQ,OAEV,4BACE,0BACGV,EADH,YACYC,QADZ,IACYA,OADZ,EACYA,EAAcU,MAAM,KAAK,GADrC,QAGA,wCAAgBC,OAAOV,GAAcW,QAAQ,OAC7C,sCACA,uBAAIV,KACJ,oCACA,gCACGC,QADH,IACGA,OADH,EACGA,EAAQU,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACX,uBAAaA,GAALD,EADG,aAOnB,0BACE,SAAC,EAAD,CAAgBA,GAAIvB,EAASV,SAAUA,OAGzC,SAAC,EAAAmC,SAAD,CAAUC,UAAU,6CAApB,UACE,SAAC,KAAD,UAMX,C","sources":["Api/getApi.js","components/AdditionalInfo/AdditionalInfo.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'fbcd27110e3ea351d2ea352461b15e7c';\n\nexport const fetchPopularMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchFullInfoMovie = async searchId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${searchId}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchReviewsMovie = async searchId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${searchId}/reviews?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchActorsMovie = async searchId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${searchId}/credits?api_key=${API_KEY}`\n  );\n  return response.data.cast;\n};\n\nexport const fetchMovieByName = async searchName => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?query=${searchName}&api_key=${API_KEY}`\n  );\n  console.log('first', response.data.results);\n  return response.data.results;\n};\n","import { Link } from 'react-router-dom';\n\nconst AdditionalInfo = ({ location }) => {\n  return (\n    <div>\n      <h2>Additional information</h2>\n      <ul>\n        <li>\n          <Link to={`cast`} state={{ from: location }}>\n            Cast\n          </Link>\n        </li>\n        <li>\n          <Link to={`reviews`} state={{ from: location }}>\n            Reviews\n          </Link>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default AdditionalInfo;\n","import { fetchFullInfoMovie } from 'Api/getApi';\nimport AdditionalInfo from 'components/AdditionalInfo/AdditionalInfo';\nimport Notiflix from 'notiflix';\nimport { Suspense, useEffect, useRef, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\n\nconst MovieDetails = () => {\n  const [film, setFilm] = useState({});\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/movies');\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchFilmsAndUpdateState = async () => {\n      try {\n        const results = await fetchFullInfoMovie(movieId);\n        if (!results) {\n          throw new Error('No popular films today');\n        }\n        setFilm(results);\n      } catch (error) {\n        Notiflix.Notify.failure(error.message);\n      }\n    };\n    fetchFilmsAndUpdateState();\n  }, [movieId]);\n\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    film;\n\n  const shouldShowInfo =\n    poster_path &&\n    title &&\n    release_date &&\n    vote_average &&\n    overview &&\n    genres?.length > 0;\n\n  return (\n    <>\n      {shouldShowInfo && (\n        <>\n          <Link to={backLinkLocationRef}>Go Back</Link>\n          <div>\n            <img\n              src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n              alt=\"Movie poster\"\n              width={300}\n              height={400}\n            />\n            <div>\n              <h2>\n                {title} ({release_date?.split('-')[0]})\n              </h2>\n              <p>User Score: {Number(vote_average).toFixed(2)}</p>\n              <h3>Overview</h3>\n              <p>{overview}</p>\n              <h3>Genres</h3>\n              <div>\n                {genres?.map(({ id, name }) => (\n                  <p key={id}>{name}</p>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <AdditionalInfo id={movieId} location={location} />\n          </div>\n\n          <Suspense fallback={<div>Loading info...</div>}>\n            <Outlet />\n          </Suspense>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["BASE_URL","API_KEY","fetchPopularMovies","axios","response","data","results","fetchFullInfoMovie","searchId","fetchReviewsMovie","fetchActorsMovie","cast","location","to","state","from","useState","film","setFilm","useLocation","backLinkLocationRef","useRef","movieId","useParams","useEffect","fetchFilmsAndUpdateState","Error","Notiflix","message","poster_path","title","release_date","vote_average","overview","genres","shouldShowInfo","length","src","alt","width","height","split","Number","toFixed","map","id","name","Suspense","fallback"],"sourceRoot":""}