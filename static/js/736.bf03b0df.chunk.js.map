{"version":3,"file":"static/js/736.bf03b0df.chunk.js","mappings":"+SAEMA,EAAW,+BACXC,EAAU,mCAEHC,EAAkB,mCAAG,oGACTC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFZ,cAC1BG,EAD0B,yBAIzBA,EAASC,KAAKC,SAJW,2CAAH,qDAOlBC,EAAkB,mCAAG,WAAMC,GAAN,uFACTL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAQ,EADA,oBACoBP,IAFX,cAC1BG,EAD0B,yBAIzBA,EAASC,MAJgB,2CAAH,sDAOlBI,EAAiB,mCAAG,WAAMD,GAAN,uFACRL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAQ,EADA,4BAC4BP,IAFpB,cACzBG,EADyB,yBAIxBA,EAASC,KAAKC,SAJU,2CAAH,sDAOjBI,EAAgB,mCAAG,WAAMF,GAAN,uFACPL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAQ,EADA,4BAC4BP,IAFrB,cACxBG,EADwB,yBAIvBA,EAASC,KAAKM,MAJS,2CAAH,sDAOhBC,EAAgB,mCAAG,WAAMC,GAAN,uFACPV,EAAAA,EAAAA,IAAA,UAClBH,EADkB,+BACaa,EADb,oBACmCZ,IAF5B,cACxBG,EADwB,yBAIvBA,EAASC,KAAKC,SAJS,2CAAH,qD,mCC7B7B,IAJsB,WACpB,OAAO,wBAAI,yCACZ,C,oIC4CD,UAxCgB,WACd,OAA0BQ,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,oGAEtBF,GAAa,GAFS,UAGAX,EAAAA,EAAAA,IAAkBQ,GAHlB,QAGhBX,EAHgB,QAITiB,QACXH,GAAa,GAEfJ,EAASV,GAPa,gDAStBkB,IAAAA,OAAAA,QAAwB,KAAMC,SATR,yDAAH,qDAYvBH,GACD,GAAE,CAACL,KAGF,0BACE,wBACQ,OAALF,QAAK,IAALA,GAAAA,EAAOQ,OACNR,EAAMW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,OAAhB,OACR,0BACG,KACD,0BAAI,WAASA,MACb,uBAAID,MAHGD,EADD,KAQV,8BAAGR,IAAa,SAAC,IAAD,SAKzB,C","sources":["Api/getApi.js","components/NoInformation/NoInformation.js","pages/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'fbcd27110e3ea351d2ea352461b15e7c';\n\nexport const fetchPopularMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchFullInfoMovie = async searchId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${searchId}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchReviewsMovie = async searchId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${searchId}/reviews?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchActorsMovie = async searchId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${searchId}/credits?api_key=${API_KEY}`\n  );\n  return response.data.cast;\n};\n\nexport const fetchMovieByName = async searchName => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?query=${searchName}&api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n","const NoInformation = () => {\n  return <h2>Sorry....☹️ No information.</h2>;\n};\n\nexport default NoInformation;\n","import { fetchReviewsMovie } from 'Api/getApi';\nimport NoInformation from 'components/NoInformation/NoInformation';\nimport Notiflix from 'notiflix';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Reviews = () => {\n  const [films, setFilms] = useState([]);\n  const { movieId } = useParams();\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const fetchFilmsReviews = async () => {\n      try {\n        setIsVisible(false);\n        const results = await fetchReviewsMovie(movieId);\n        if (!results.length) {\n          setIsVisible(true);\n        }\n        setFilms(results);\n      } catch (error) {\n        Notiflix.Notify.failure(error.message);\n      }\n    };\n    fetchFilmsReviews();\n  }, [movieId]);\n\n  return (\n    <div>\n      <ul>\n        {films?.length ? (\n          films.map(({ id, content, author }) => (\n            <li key={id}>\n              {' '}\n              <h3>Author: {author}</h3>\n              <p>{content}</p>\n            </li>\n          ))\n        ) : (\n          <>{isVisible && <NoInformation />}</>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["BASE_URL","API_KEY","fetchPopularMovies","axios","response","data","results","fetchFullInfoMovie","searchId","fetchReviewsMovie","fetchActorsMovie","cast","fetchMovieByName","searchName","useState","films","setFilms","movieId","useParams","isVisible","setIsVisible","useEffect","fetchFilmsReviews","length","Notiflix","message","map","id","content","author"],"sourceRoot":""}