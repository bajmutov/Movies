{"version":3,"file":"static/js/304.912905a4.chunk.js","mappings":"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","sources":["Api/getApi.js","components/Loader/Loader.jsx","components/NoInformation/NoInformation.js","components/AdditionalInfo/AdditionalInfo.jsx","pages/MovieDetails.styled.js","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'fbcd27110e3ea351d2ea352461b15e7c';\n\nexport const fetchPopularMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchFullInfoMovie = async searchId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${searchId}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchReviewsMovie = async searchId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${searchId}/reviews?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchActorsMovie = async searchId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${searchId}/credits?api_key=${API_KEY}`\n  );\n  return response.data.cast;\n};\n\nexport const fetchMovieByName = async searchName => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?query=${searchName}&api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n","import { Blocks } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <Blocks\n      visible={true}\n      height=\"80\"\n      width=\"80\"\n      ariaLabel=\"blocks-loading\"\n      wrapperStyle={{}}\n      wrapperClass=\"blocks-wrapper\"\n    />\n  );\n};\n","const NoInformation = () => {\n  return <h2>Sorry....☹️ No information.</h2>;\n};\n\nexport default NoInformation;\n","import { Link } from 'react-router-dom';\n\nconst AdditionalInfo = () => {\n  return (\n    <div>\n      <h2>Additional information</h2>\n      <ul>\n        <li>\n          <Link to={`cast`}>Cast</Link>\n        </li>\n        <li>\n          <Link to={`reviews`}>Reviews</Link>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default AdditionalInfo;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const StyledBackLink = styled(Link)`\n  display: block;\n  color: black;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  width: 65px;\n  border: 2px solid black;\n  border-radius: 5px;\n  padding: 5px;\n  text-decoration: none;\n  font-weight: 700;\n  cursor: pointer;\n  box-shadow: inset 0 0 10px 5px rgba(0, 0, 0, 0.3);\n`;\n\nexport const Container = styled.div`\n  display: flex;\n`;\n\nexport const DescrWrap = styled.div`\n  padding-top: 40px;\n  margin-left: 25px;\n`;\n\nexport const GenresWrap = styled.div`\n  display: flex;\n  gap: 10px;\n`;\n","import { fetchFullInfoMovie } from 'Api/getApi';\nimport AdditionalInfo from 'components/AdditionalInfo/AdditionalInfo';\nimport { Loader } from 'components/Loader/Loader';\nimport NoInformation from 'components/NoInformation/NoInformation';\nimport Notiflix from 'notiflix';\nimport { Suspense, useEffect, useRef, useState } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport {\n  Container,\n  DescrWrap,\n  GenresWrap,\n  StyledBackLink,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const [film, setFilm] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [isVisible, setIsVisible] = useState(false);\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/movies');\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchFilmsAndUpdateState = async () => {\n      try {\n        setIsLoading(true);\n        setIsVisible(false);\n        const results = await fetchFullInfoMovie(movieId);\n        if (!results.homepage) {\n          setIsVisible(true);\n        }\n        setFilm(results);\n      } catch (error) {\n        Notiflix.Notify.failure(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchFilmsAndUpdateState();\n  }, [movieId]);\n\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    film;\n\n  const shouldShowInfo =\n    poster_path &&\n    title &&\n    release_date &&\n    vote_average &&\n    overview &&\n    genres?.length;\n\n  return (\n    <>\n      <StyledBackLink to={backLinkLocationRef.current}>Go Back</StyledBackLink>\n      {isLoading && <Loader />}\n      {shouldShowInfo ? (\n        <>\n          <Container>\n            <img\n              src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n              alt=\"Movie poster\"\n              width={300}\n              height={400}\n            />\n            <DescrWrap>\n              <h2>\n                {title} ({release_date?.split('-')[0]})\n              </h2>\n              <p>User Score: {Number(vote_average).toFixed(2)}</p>\n              <h3>Overview</h3>\n              <p>{overview}</p>\n              <h3>Genres</h3>\n              <GenresWrap>\n                {genres?.map(({ id, name }) => (\n                  <p key={id}>{name}</p>\n                ))}\n              </GenresWrap>\n            </DescrWrap>\n          </Container>\n          <div>\n            <AdditionalInfo id={movieId} />\n          </div>\n          <Suspense fallback={<div>Loading info...</div>}>\n            <Outlet />\n          </Suspense>\n        </>\n      ) : (\n        <>{isVisible && <NoInformation />}</>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["BASE_URL","API_KEY","fetchPopularMovies","axios","response","data","results","fetchFullInfoMovie","searchId","fetchReviewsMovie","fetchActorsMovie","cast","fetchMovieByName","searchName","Loader","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","to","StyledBackLink","styled","Link","Container","DescrWrap","GenresWrap","useState","film","setFilm","isLoading","setIsLoading","isVisible","setIsVisible","location","useLocation","backLinkLocationRef","useRef","state","from","movieId","useParams","useEffect","fetchFilmsAndUpdateState","homepage","Notiflix","message","poster_path","title","release_date","vote_average","overview","genres","shouldShowInfo","length","current","src","alt","split","Number","toFixed","map","id","name","Suspense","fallback","NoInformation"],"sourceRoot":""}