{"version":3,"file":"static/js/681.d9a08e83.chunk.js","mappings":"+SAEMA,EAAW,+BACXC,EAAU,mCAEHC,EAAkB,mCAAG,oGACTC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFZ,cAC1BG,EAD0B,yBAIzBA,EAASC,KAAKC,SAJW,2CAAH,qDAOlBC,EAAkB,mCAAG,WAAMC,GAAN,uFACTL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAQ,EADA,oBACoBP,IAFX,cAC1BG,EAD0B,yBAIzBA,EAASC,MAJgB,2CAAH,sDAOlBI,EAAiB,mCAAG,WAAMD,GAAN,uFACRL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAQ,EADA,4BAC4BP,IAFpB,cACzBG,EADyB,yBAIxBA,EAASC,KAAKC,SAJU,2CAAH,sDAOjBI,EAAgB,mCAAG,WAAMF,GAAN,uFACPL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAQ,EADA,4BAC4BP,IAFrB,cACxBG,EADwB,yBAIvBA,EAASC,KAAKM,MAJS,2CAAH,sDAOhBC,EAAgB,mCAAG,WAAMC,GAAN,uFACPV,EAAAA,EAAAA,IAAA,UAClBH,EADkB,+BACaa,EADb,oBACmCZ,IAF5B,cACxBG,EADwB,yBAIvBA,EAASC,KAAKC,SAJS,2CAAH,qD,mCC7B7B,IAJsB,WACpB,OAAO,wBAAI,yCACZ,C,uLCAYQ,EAAKC,EAAAA,GAAAA,GAAH,kEAKFC,EAAWD,EAAAA,GAAAA,IAAH,8C,SCqDrB,EArDa,WACX,OAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,oGAEtBF,GAAa,GAFS,UAGAb,EAAAA,EAAAA,IAAiBU,GAHjB,QAGhBd,EAHgB,QAIToB,QACXH,GAAa,GAEfJ,EAAUb,GAPY,gDAStBqB,IAAAA,OAAAA,QAAwB,KAAMC,SATR,yDAAH,qDAYvBH,GACD,GAAE,CAACL,KAGF,0BACE,wBACS,OAANF,QAAM,IAANA,GAAAA,EAAQQ,OACPR,EAAOW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,KAAhC,OACT,UAACnB,EAAD,WACGkB,IACC,gBACEE,IAAG,yCAAoCF,GACvCG,IAAI,QACJC,MAAO,GACPC,OAAQ,OAGZ,UAACrB,EAAD,YACE,0BACE,uBAAG,eAAc,KAAGiB,MAEtB,0BACE,uBAAG,cAAa,KAAGF,UAdhBD,EADA,KAqBX,8BAAGR,IAAa,SAACgB,EAAA,EAAD,SAKzB,C","sources":["Api/getApi.js","components/NoInformation/NoInformation.js","pages/Cast.styled.js","pages/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'fbcd27110e3ea351d2ea352461b15e7c';\n\nexport const fetchPopularMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchFullInfoMovie = async searchId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${searchId}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchReviewsMovie = async searchId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${searchId}/reviews?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchActorsMovie = async searchId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${searchId}/credits?api_key=${API_KEY}`\n  );\n  return response.data.cast;\n};\n\nexport const fetchMovieByName = async searchName => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?query=${searchName}&api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n","const NoInformation = () => {\n  return <h2>Sorry....☹️ No information.</h2>;\n};\n\nexport default NoInformation;\n","import styled from 'styled-components';\n\nexport const Li = styled.li`\n  display: flex;\n  margin-bottom: 10px;\n`;\n\nexport const DescWrap = styled.div`\n  margin-left: 25px;\n`;\n","import { fetchActorsMovie } from 'Api/getApi';\nimport NoInformation from 'components/NoInformation/NoInformation';\nimport Notiflix from 'notiflix';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { DescWrap, Li } from './Cast.styled';\n\nconst Cast = () => {\n  const [actors, setActors] = useState([]);\n  const { movieId } = useParams();\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const fetchFilmsCredits = async () => {\n      try {\n        setIsVisible(false);\n        const results = await fetchActorsMovie(movieId);\n        if (!results.length) {\n          setIsVisible(true);\n        }\n        setActors(results);\n      } catch (error) {\n        Notiflix.Notify.failure(error.message);\n      }\n    };\n    fetchFilmsCredits();\n  }, [movieId]);\n\n  return (\n    <div>\n      <ul>\n        {actors?.length ? (\n          actors.map(({ id, character, profile_path, name }) => (\n            <Li key={id}>\n              {profile_path && (\n                <img\n                  src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                  alt=\"Actor\"\n                  width={80}\n                  height={120}\n                />\n              )}\n              <DescWrap>\n                <p>\n                  <b>Actor name</b>: {name}\n                </p>\n                <p>\n                  <b>Character</b>: {character}\n                </p>\n              </DescWrap>\n            </Li>\n          ))\n        ) : (\n          <>{isVisible && <NoInformation />}</>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["BASE_URL","API_KEY","fetchPopularMovies","axios","response","data","results","fetchFullInfoMovie","searchId","fetchReviewsMovie","fetchActorsMovie","cast","fetchMovieByName","searchName","Li","styled","DescWrap","useState","actors","setActors","movieId","useParams","isVisible","setIsVisible","useEffect","fetchFilmsCredits","length","Notiflix","message","map","id","character","profile_path","name","src","alt","width","height","NoInformation"],"sourceRoot":""}